generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model augments_ranking {
  id                  String @id @db.VarChar
  numberOfAppearances Int    @default(0)
  sumOfPlacements     Int    @default(0)
  sumOfWins           Int    @default(0)
  icon                String
  name                String
}

model traits {
  id        String              @id
  icon      String
  name      String
  champions champions_ranking[]
}

model champions_ranking {
  id                  String   @id @db.VarChar
  numberOfAppearances Int      @default(0)
  sumOfPlacements     Int      @default(0)
  sumOfWins           Int      @default(0)
  icon                String
  name                String
  traits              traits[]
}

model general_data {
  totalNumberOfMatches Int
  id                   Int    @id
  totalNumberOfComps   Int    @default(0)
  gameVersion          String
  lastChange           BigInt @default(1669673526)
}

model items_ranking {
  id                  String @id
  numberOfAppearances Int    @default(0)
  sumOfPlacements     Int    @default(0)
  sumOfWins           Int    @default(0)
  type                String
  icon                String
  name                String
}

model compositionJSON {
  id                   BigInt          @id @default(autoincrement())
  json                 String
  visibility           Boolean         @default(true)
  numberOfCompsFound   Int             @default(4000)
  totalNumberOfMatches Int             @default(1000)
  augments             compsAugments[]
  units                compsUnits[]
}

model compsAugments {
  compId          BigInt
  comp            compositionJSON @relation(fields: [compId], references: [id], onDelete: Cascade)
  augmentId       String
  sumOfPlacements Int
  numOfWins       Int
  numOfAppear     Int

  @@id([compId, augmentId])
}

model compsItems {
  compId      BigInt
  itemId      String
  numOfAppear Int
  unitId      String
  compsUnits  compsUnits @relation(fields: [compId, unitId], references: [compId, unitId], onDelete: Cascade)

  @@id([compId, itemId, unitId])
}

model compsUnits {
  compId      BigInt
  comp        compositionJSON @relation(fields: [compId], references: [id], onDelete: Cascade)
  unitId      String
  numOfAppear Int
  items       compsItems[]

  @@id([compId, unitId])
}

model userCompositionJSON {
  id   String @id
  json Json   @db.Json
}

model analysisJSON {
  id   String @id
  json Json   @db.Json
}

model augments_first_choice_ranking {
  id                  String @id @db.VarChar
  numberOfAppearances Int    @default(0)
  sumOfPlacements     Int    @default(0)
  sumOfWins           Int    @default(0)
  icon                String
  name                String
}

model augments_second_choice_ranking {
  id                  String @id @db.VarChar
  numberOfAppearances Int    @default(0)
  sumOfPlacements     Int    @default(0)
  sumOfWins           Int    @default(0)
  icon                String
  name                String
}

model augments_third_choice_ranking {
  id                  String @id @db.VarChar
  numberOfAppearances Int    @default(0)
  sumOfPlacements     Int    @default(0)
  sumOfWins           Int    @default(0)
  icon                String
  name                String
}

model users {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  password     String
  userName     String?
  summonerName String?
  region       String?
}

model guides {
  title               String          @id
  description         String
  set                 String
  timeRead            Int
  date                String
  imageUrl            String
  borderColorUnitCost Int
  elements            guideElements[]
}

model guideElements {
  order      Int
  type       String
  content    String?
  guideTitle String
  guide      guides  @relation(fields: [guideTitle], references: [title])

  @@id([order, guideTitle])
}
